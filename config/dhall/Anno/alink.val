let
  free = ./Attr/free.fun
in let
  closed = ./Attr/closed.fun
in let
  anchor = ./Attr/anchor.fun
in
  { name = "ALink"
  
    -- Possible types; `relType` in ISO-TimeML
  , typ =
      { among =
         ["Initiates", "Culminates", "Terminates", "Continues", "Reinitiates"]
      , def = [] : Optional Text
      }
  
    -- Attributes
    --
    -- NOTE: the `eventID` and `relatedToEvent` ISO-TimeML attributes are
    -- represented by the relation's source and target nodes
  , attributes =
      [ { _1 = "Signal" -- `signalID` in ISO-TimeML
        , _2 = anchor {=}
        }
      ] : List {_1 : Text, _2 : ./Attr.typ}

    -- Type-dependent attributes
  , attributesOnType = [] : List 
      { key : Text
      , val : List {_1 : Text, _2 : ./Attr.typ} }
  } : ./Entity.typ